{"version":3,"file":"static/js/661.0ccd4cce.chunk.js","mappings":"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","sources":["api/axiosDefaults.js","api/constants.js","js/checkIfErrorNotified.js","js/statusConstants.js","api/fetchSearchMovies.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport API from './constants';\n\nconst instance = axios.create({ baseURL: API.BASE_URL });\n\ninstance.defaults.headers.common = {\n  Authorization: `Bearer ${API.AUTH_TOKEN}`,\n};\n\nexport default instance;\n","const API = Object.freeze({\n  BASE_URL: 'https://api.themoviedb.org/3',\n  AUTH_TOKEN:\n    'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwMTU2NjY2YTM4MDg5YTViYWJkZTYxMDY0M2Q5ZjFiMiIsInN1YiI6IjY1MTZkODJmOWI4NjE2MDBjNWNhODViMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Z7svSSg1PRCQecW87TtoFDZ2Q6FReUtt3L8XvXbN6c4',\n  ENDPOINT: Object.freeze({\n    TRENDING: '/trending/movie/day',\n    SEARCH_MOVIE: '/search/movie',\n    MOVIE_DETAILS: '/movie',\n    CREDITS: '/credits',\n    REVIEWS: '/reviews',\n  }),\n  IMAGE_SRC: 'https://image.tmdb.org/t/p/w500',\n  QUERY: Object.freeze({\n    LANGUAGE: 'language=en-US',\n  }),\n});\n\nexport default API;\n","import { Notify } from 'notiflix';\n\nconst checkIfErrorNotified = (isErrorNotified, errorMessage) => {\n  if (isErrorNotified) {\n    return false;\n  }\n\n  Notify.failure(errorMessage);\n  return true;\n};\n\nexport default checkIfErrorNotified;\n","const STATUS = Object.freeze({\n  IDDLE: 'iddle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n});\n\nexport default STATUS;\n","import instance from './axiosDefaults';\nimport API from './constants';\n\nconst fetchSearchMovies = async (query = 'batman', page = 1) => {\n  const responce = await instance.get(\n    `${API.ENDPOINT.SEARCH_MOVIE}?${API.QUERY.LANGUAGE}&query=${query}&page=${page}`\n  );\n\n  return responce.data;\n};\n\nexport default fetchSearchMovies;\n","import { useEffect, useRef, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport STATUS from 'js/statusConstants';\nimport fetchSearchMovies from 'api/fetchSearchMovies';\nimport checkIfErrorNotified from 'js/checkIfErrorNotified';\nimport stopper from '../images/stopper_cat_poster.jpg';\nimport API from 'api/constants';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDDLE);\n  const isErrorNotify = useRef(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!query) {\n      setMovies([]);\n      return;\n    }\n\n    setStatus(STATUS.PENDING);\n\n    const processSearchMovies = async () => {\n      try {\n        const data = await fetchSearchMovies(query);\n        setMovies(data.results);\n        setStatus(STATUS.RESOLVED);\n\n        if (!data.results.length) {\n          setStatus(STATUS.REJECTED);\n        }\n      } catch ({ message }) {\n        isErrorNotify.current = checkIfErrorNotified(\n          isErrorNotify.current,\n          message\n        );\n\n        setStatus(STATUS.REJECTED);\n      }\n    };\n\n    processSearchMovies();\n  }, [query]);\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n\n    const { value } = event.target.query;\n    const nextParams = value.trim() !== '' ? { query: value.trim() } : {};\n    setSearchParams(nextParams);\n\n    event.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <h2>Movies</h2>\n      <form action=\"submit\" onSubmit={handleSubmitForm}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {status === STATUS.PENDING && <p>Loading...</p>}\n\n      {status === STATUS.RESOLVED && (\n        <ul style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\n          {movies.map(({ id, title, poster_path }) => {\n            const imageSrc = poster_path\n              ? API.IMAGE_SRC + poster_path\n              : stopper;\n\n            return (\n              <li key={id}>\n                <Link to={`${id}`} state={{ from: location }}>\n                  <img src={imageSrc} alt={title} height=\"200\" />\n                  <p>{title}</p>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n\n      {status === STATUS.REJECTED && <p>We don't have any movie</p>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","API","defaults","headers","common","Authorization","concat","Object","freeze","BASE_URL","AUTH_TOKEN","ENDPOINT","TRENDING","SEARCH_MOVIE","MOVIE_DETAILS","CREDITS","REVIEWS","IMAGE_SRC","QUERY","LANGUAGE","isErrorNotified","errorMessage","Notify","STATUS","IDDLE","PENDING","RESOLVED","REJECTED","fetchSearchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","query","page","responce","_args","arguments","_context","prev","next","length","undefined","sent","abrupt","data","stop","apply","_searchParams$get","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","status","setStatus","isErrorNotify","useRef","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","useEffect","processSearchMovies","message","results","t0","current","checkIfErrorNotified","_jsxs","_Fragment","children","_jsx","action","onSubmit","event","preventDefault","value","target","nextParams","trim","currentTarget","reset","type","name","style","display","flexWrap","gap","map","_ref3","id","title","poster_path","imageSrc","stopper","Link","to","state","from","src","alt","height"],"sourceRoot":""}