{"version":3,"file":"static/js/847.dcb4bfda.chunk.js","mappings":"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","sources":["api/axiosDefaults.js","api/constants.js","js/checkIfErrorNotified.js","js/statusConstants.js","api/fetchMovieReviews.js","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport API from './constants';\n\nconst instance = axios.create({ baseURL: API.BASE_URL });\n\ninstance.defaults.headers.common = {\n  Authorization: `Bearer ${API.AUTH_TOKEN}`,\n};\n\nexport default instance;\n","const API = Object.freeze({\n  BASE_URL: 'https://api.themoviedb.org/3',\n  AUTH_TOKEN:\n    'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwMTU2NjY2YTM4MDg5YTViYWJkZTYxMDY0M2Q5ZjFiMiIsInN1YiI6IjY1MTZkODJmOWI4NjE2MDBjNWNhODViMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Z7svSSg1PRCQecW87TtoFDZ2Q6FReUtt3L8XvXbN6c4',\n  ENDPOINT: Object.freeze({\n    TRENDING: '/trending/movie/day',\n    SEARCH_MOVIE: '/search/movie',\n    MOVIE_DETAILS: '/movie',\n    CREDITS: '/credits',\n    REVIEWS: '/reviews',\n  }),\n  IMAGE_SRC: 'https://image.tmdb.org/t/p/w500',\n  QUERY: Object.freeze({\n    LANGUAGE: 'language=en-US',\n  }),\n});\n\nexport default API;\n","import { Notify } from 'notiflix';\n\nconst checkIfErrorNotified = (isErrorNotified, errorMessage) => {\n  if (isErrorNotified) {\n    return false;\n  }\n\n  Notify.failure(errorMessage);\n  return true;\n};\n\nexport default checkIfErrorNotified;\n","const STATUS = Object.freeze({\n  IDDLE: 'iddle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n});\n\nexport default STATUS;\n","import instance from './axiosDefaults';\nimport API from './constants';\n\nconst fetchMovieReviews = async id => {\n  const reponce = await instance.get(\n    `${API.BASE_URL}${API.ENDPOINT.MOVIE_DETAILS}/${id}${API.ENDPOINT.REVIEWS}?${API.QUERY.LANGUAGE}&page=1`\n  );\n\n  return await reponce.data;\n};\n\nexport default fetchMovieReviews;\n","import { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchMovieReviews from 'api/fetchMovieReviews';\nimport checkIfErrorNotified from 'js/checkIfErrorNotified';\nimport STATUS from 'js/statusConstants';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDDLE);\n  const { movieId } = useParams();\n  const isErrorNotify = useRef(false);\n\n  useEffect(() => {\n    setStatus(STATUS.PENDING);\n\n    const processMovieReviews = async () => {\n      try {\n        const { results } = await fetchMovieReviews(movieId);\n        setReviews(results);\n        setStatus(STATUS.RESOLVED);\n\n        if (!results.length) {\n          setStatus(STATUS.REJECTED);\n        }\n      } catch ({ message }) {\n        isErrorNotify.current = checkIfErrorNotified(\n          isErrorNotify.current,\n          message\n        );\n\n        setStatus(STATUS.REJECTED);\n      }\n    };\n\n    processMovieReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <h3>Reviews</h3>\n\n      {status === STATUS.PENDING && <p>Loading...</p>}\n\n      {status === STATUS.RESOLVED && (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {status === STATUS.REJECTED && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["instance","axios","baseURL","API","defaults","headers","common","Authorization","concat","Object","freeze","BASE_URL","AUTH_TOKEN","ENDPOINT","TRENDING","SEARCH_MOVIE","MOVIE_DETAILS","CREDITS","REVIEWS","IMAGE_SRC","QUERY","LANGUAGE","isErrorNotified","errorMessage","Notify","STATUS","IDDLE","PENDING","RESOLVED","REJECTED","fetchMovieReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","id","reponce","_context","prev","next","sent","data","abrupt","stop","_x","apply","arguments","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","status","setStatus","movieId","useParams","isErrorNotify","useRef","useEffect","processMovieReviews","_yield$fetchMovieRevi","results","message","length","t0","current","checkIfErrorNotified","_jsxs","_Fragment","children","_jsx","map","_ref3","author","content"],"sourceRoot":""}